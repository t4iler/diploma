import streamlit as st
import datetime
import numpy as np
import requests
from pathlib import Path
from io import BytesIO
from pydub import AudioSegment
from audiorecorder import audiorecorder
from phrase_evaluator import evaluate_phrase_pronunciation  # ‚úÖ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å

PHRASE_AUDIO_PATH = "audio/etalon/phrases"
USER_RECORDINGS = "audio/user"
BACKEND_URL = "http://127.0.0.1:5000"

def render_intermediate(user_id, gender, lang="en"):
    st.subheader("üìó Intermediate ‚Äî Bismillah Phrase" if lang == "en" else "üìó –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –§—Ä–∞–∑–∞ –ë–∏—Å–º–∏–ª–ª—è—Ö")

    phrase = "ÿ®ÿ≥ŸÖ ÿßŸÑŸÑŸá ÿßŸÑÿ±ÿ≠ŸÖŸÜ ÿßŸÑÿ±ÿ≠ŸäŸÖ"
    gender_folder = "male" if gender == "male" else "female"
    etalon_files = list(Path(PHRASE_AUDIO_PATH).joinpath(gender_folder).glob("bismillah_*.mp3"))

    if etalon_files:
        st.markdown(f"### üìñ {phrase}")
        for f in etalon_files:
            st.audio(str(f), format="audio/mp3")

        ts = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        filename = f"user_{user_id}_bismillah_{ts}.wav"
        wav_path = Path(USER_RECORDINGS) / filename
        wav_path.parent.mkdir(parents=True, exist_ok=True)

        start_prompt = "üî¥ Start recording" if lang == "en" else "üî¥ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
        stop_prompt = "‚èπ Stop recording" if lang == "en" else "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"

        audio = audiorecorder(start_prompt=start_prompt, stop_prompt=stop_prompt, key="rec-bismillah")
        if audio:
            buffer = BytesIO()
            audio.export(buffer, format="wav")
            with open(wav_path, "wb") as f:
                f.write(buffer.getvalue())

            st.audio(str(wav_path))
            st.success("‚úÖ Recording saved" if lang == "en" else "‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            # ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç—Ç–∞–ª–æ–Ω–∞–º–∏
            scores = []
            for etalon in etalon_files:
                score, _ = evaluate_phrase_pronunciation(str(wav_path), str(etalon), lang=lang)
                if score is not None:
                    scores.append(score)

            if scores:
                final_score = round(np.mean(scores), 2)
                st.markdown(f"üéØ {'Accuracy' if lang == 'en' else '–¢–æ—á–Ω–æ—Å—Ç—å'}: **{final_score}%**")

                # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                _, feedback = evaluate_phrase_pronunciation(str(wav_path), str(etalon_files[0]), lang=lang)
                st.info(f"üí¨ {'Feedback:' if lang == 'en' else '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:'} {feedback}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                try:
                    requests.post(f"{BACKEND_URL}/save_recording", json={
                        "user_id": user_id,
                        "item": "bismillah",
                        "recording_path": str(wav_path),
                        "score": final_score
                    })
                except Exception:
                    st.warning("‚ö†Ô∏è Could not save to database")
            else:
                st.error("‚ö†Ô∏è No valid etalon scores.")
    else:
        st.warning("‚ö†Ô∏è No etalon files found.")
