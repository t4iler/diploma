import streamlit as st
st.set_page_config(page_title="Arabic Pronunciation Training")
import requests
import datetime
import json
import os
from pathlib import Path
from io import BytesIO
from pydub import AudioSegment
from audiorecorder import audiorecorder
from pronunciation_evaluator import evaluate_pronunciation
from intermediate_module import render_intermediate

# === –ü–µ—Ä–µ–≤–æ–¥—ã ===
translations = {
    "Login": {"ru": "–í–æ–π—Ç–∏"},
    "Password": {"ru": "–ü–∞—Ä–æ–ª—å"},
    "Register": {"ru": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"},
    "Surname": {"ru": "–§–∞–º–∏–ª–∏—è"},
    "Name": {"ru": "–ò–º—è"},
    "Gender": {"ru": "–ü–æ–ª"},
    "Male": {"ru": "–ú—É–∂—Å–∫–æ–π"},
    "Female": {"ru": "–ñ–µ–Ω—Å–∫–∏–π"},
    "Level: Beginner (Letters)": {"ru": "–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π (–±—É–∫–≤—ã)"},
    "Recording saved": {"ru": "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"},
    "Feedback:": {"ru": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:"},
    "Accuracy": {"ru": "–¢–æ—á–Ω–æ—Å—Ç—å"},
    "Progress": {"ru": "–ü—Ä–æ–≥—Ä–µ—Å—Å"},
    "History": {"ru": "–ò—Å—Ç–æ—Ä–∏—è"},
    "Total recordings:": {"ru": "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:"},
    "Average accuracy:": {"ru": "–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:"},
    "Show": {"ru": "–ü–æ–∫–∞–∑–∞—Ç—å"},
    "Logout": {"ru": "–í—ã–π—Ç–∏"},
    "Email": {"ru": "Email"},
    "Login failed": {"ru": "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"},
    "Registration error": {"ru": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"},
    "Server not responding": {"ru": "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"},
    "Successfully registered! Please login.": {"ru": "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–æ–π–¥–∏—Ç–µ."},
    "Arabic Pronunciation Training": {"ru": "–û–±—É—á–µ–Ω–∏–µ –∞—Ä–∞–±—Å–∫–æ–º—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é"},
    "Letter": {"ru": "–ë—É–∫–≤–∞"},
    "Choose Level": {"ru": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å"},
    "Beginner": {"ru": "–ù–∞—á–∏–Ω–∞—é—â–∏–π"},
    "Intermediate": {"ru": "–°—Ä–µ–¥–Ω–∏–π"}
}

def t(text):
    lang = st.session_state.get("lang", "en")
    return translations.get(text, {}).get(lang, text)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BACKEND_URL = "http://127.0.0.1:5000"
AUDIO_PATH = "audio/etalon/letters"
USER_RECORDINGS = "audio/user"
SESSION_FILE = ".session.json"

# === –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
if "lang" not in st.session_state:
    st.session_state.lang = "en"

lang = st.radio("üåê Language", ["en", "ru"], format_func=lambda x: "üá∫üá∏ English" if x == "en" else "üá∑üá∫ –†—É—Å—Å–∫–∏–π", horizontal=True)
st.session_state.lang = lang

# === –°–µ—Å—Å–∏—è ===
default_session = {
    "user_id": None,
    "level": None,
    "gender": None,
    "name": None,
    "authenticated": False,
}

for key, val in default_session.items():
    if key not in st.session_state:
        st.session_state[key] = val

if not st.session_state.authenticated and os.path.exists(SESSION_FILE):
    with open(SESSION_FILE, "r") as f:
        session_data = json.load(f)
        st.session_state.update(session_data)

st.title(t("Arabic Pronunciation Training"))

# === Logout ===
if st.session_state.authenticated:
    if st.sidebar.button("üö™ " + t("Logout")):
        st.session_state.clear()
        if os.path.exists(SESSION_FILE):
            os.remove(SESSION_FILE)
        st.rerun()

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
if not st.session_state.authenticated:
    tab1, tab2 = st.tabs(["üîê " + t("Login"), "üìù " + t("Register")])

    with tab1:
        email = st.text_input(t("Email"), key="login_email")
        password = st.text_input(t("Password"), type="password", key="login_password")
        if st.button(t("Login"), key="login_button"):
            try:
                response = requests.post(f"{BACKEND_URL}/login", json={
                    "email": email,
                    "password": password
                })
                res = response.json()
                if response.status_code == 200:
                    st.session_state.update({
                        "user_id": res["user_id"],
                        "level": res["level"],
                        "gender": res["gender"],
                        "name": res["name"],
                        "authenticated": True
                    })
                    with open(SESSION_FILE, "w") as f:
                        json.dump(dict(st.session_state), f)
                    st.rerun()
                else:
                    st.error(res.get("message", t("Login failed")))
            except Exception:
                st.error(t("Server not responding"))

    with tab2:
        name = st.text_input(t("Name"), key="register_name")
        surname = st.text_input(t("Surname"), key="register_surname")
        gender = st.radio(t("Gender"), ["male", "female"], format_func=lambda x: t("Male") if x == "male" else t("Female"), key="register_gender")
        reg_email = st.text_input(t("Email") + " (register)", key="register_email")
        reg_password = st.text_input(t("Password"), type="password", key="register_password")

        if st.button(t("Register"), key="register_button"):
            try:
                response = requests.post(f"{BACKEND_URL}/register", json={
                    "name": name,
                    "surname": surname,
                    "gender": gender,
                    "email": reg_email,
                    "password": reg_password
                })
                res = response.json()
                if response.status_code == 200:
                    st.success(t("Successfully registered! Please login."))
                else:
                    st.error(res.get("message", t("Registration error")))
            except Exception:
                st.error(t("Server not responding"))

# === –ü—Ä–æ–≥—Ä–µ—Å—Å ===
if st.session_state.authenticated:
    st.sidebar.subheader("üìà " + t("Progress"))
    if st.sidebar.button(t("Show")):
        try:
            response = requests.get(f"{BACKEND_URL}/progress/{st.session_state.user_id}")
            if response.status_code == 200:
                data = response.json()
                st.subheader("üìä " + t("Progress"))
                st.markdown(f"**{t('Total recordings:')}** {data['total']}")
                st.markdown(f"**{t('Average accuracy:')}** {round(data['average'], 2)}%")

                st.markdown("### üìù " + t("History"))
                for r in data["history"]:
                    st.markdown(f"‚Ä¢ {r['item']} ‚Äî {r['score']}% ‚Äî *{r['timestamp']}*")
            else:
                st.error("Failed to load progress.")
        except Exception as e:
            st.error(f"Error: {e}")

# === –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ===
if st.session_state.authenticated:
    level_choice = st.sidebar.selectbox("üéì " + t("Choose Level"), ["beginner", "intermediate"], format_func=lambda x: t("Beginner") if x == "beginner" else t("Intermediate"))
    st.session_state.level = level_choice

# === Beginner ===
if st.session_state.authenticated and st.session_state.level == "beginner":
    st.subheader("üìò " + t("Level: Beginner (Letters)"))

    letters = [
        "ÿß", "ÿ®", "ÿ™", "ÿ´", "ÿ¨", "ÿ≠", "ÿÆ", "ÿØ", "ÿ∞", "ÿ±", "ÿ≤", "ÿ≥", "ÿ¥", "ÿµ",
        "ÿ∂", "ÿ∑", "ÿ∏", "ÿπ", "ÿ∫", "ŸÅ", "ŸÇ", "ŸÉ", "ŸÑ", "ŸÖ", "ŸÜ", "Ÿá", "Ÿà", "Ÿä"
    ]

    for i, letter in enumerate(letters):
        with st.expander(f"{t('Letter')} {letter}"):
            etalon_path = Path(AUDIO_PATH) / st.session_state.gender / f"{i+1}.mp3"
            st.audio(str(etalon_path))

            ts = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
            filename = f"user_{st.session_state.user_id}_letter_{i+1}_{ts}.wav"
            wav_path = Path(USER_RECORDINGS) / filename
            wav_path.parent.mkdir(parents=True, exist_ok=True)

            audio = audiorecorder(start_prompt="üî¥ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å" if st.session_state.lang == "ru" else "üî¥ Start recording",
                                  stop_prompt="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" if st.session_state.lang == "ru" else "‚èπ Stop recording",
                                  key=f"rec-{i}")
            if audio:
                buffer = BytesIO()
                audio.export(buffer, format="wav")
                with open(wav_path, "wb") as f:
                    f.write(buffer.getvalue())

                st.audio(str(wav_path))
                st.success("‚úÖ " + t("Recording saved"))

                score, feedback = evaluate_pronunciation(str(wav_path), str(etalon_path), lang=st.session_state.lang)
                if score is not None:
                    st.markdown(f"üéØ {t('Accuracy')}: **{score}%**")
                    st.info(f"üí¨ {t('Feedback:')} {feedback}")
                    try:
                        requests.post(f"{BACKEND_URL}/save_recording", json={
                            "user_id": st.session_state.user_id,
                            "item": letter,
                            "recording_path": str(wav_path),
                            "score": score
                        })
                    except Exception:
                        st.warning("‚ö†Ô∏è Could not save to database")
                else:
                    st.error(feedback)

# === Intermediate ===
if st.session_state.authenticated and st.session_state.level == "intermediate":
    render_intermediate(user_id=st.session_state.user_id, gender=st.session_state.gender, lang=st.session_state.lang)
