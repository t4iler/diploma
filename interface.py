import streamlit as st
import requests
import datetime
from pathlib import Path
from io import BytesIO
from pydub import AudioSegment
from audiorecorder import audiorecorder
from pronunciation_evaluator import evaluate_pronunciation

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
BACKEND_URL = "http://127.0.0.1:5000"
AUDIO_PATH = "audio/etalon/letters"
USER_RECORDINGS = "audio/user"

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ ===
for key in ["user_id", "level", "gender", "name", "authenticated"]:
    if key not in st.session_state:
        st.session_state[key] = None if key != "authenticated" else False

st.set_page_config(page_title="–û–±—É—á–µ–Ω–∏–µ –∞—Ä–∞–±—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É", layout="centered")
st.title("üïå –û–±—É—á–µ–Ω–∏–µ –∞—Ä–∞–±—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É")

# === –í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
if not st.session_state.authenticated:
    tab1, tab2 = st.tabs(["üîê –í—Ö–æ–¥", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    with tab1:
        st.subheader("–í—Ö–æ–¥")
        email = st.text_input("Email", key="login_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")

        if st.button("–í–æ–π—Ç–∏", key="login_button"):
            headers = {"Content-Type": "application/json"}
            response = requests.post(
                f"{BACKEND_URL}/login",
                json={"email": email, "password": password},
                headers=headers
            )

            try:
                res = response.json()
            except Exception:
                st.error("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
                res = {}

            if response.status_code == 200:
                required = ["user_id", "level", "gender", "name"]
                if all(k in res for k in required):
                    st.session_state.user_id = res["user_id"]
                    st.session_state.level = res["level"]
                    st.session_state.gender = res["gender"]
                    st.session_state.name = res["name"]
                    st.session_state.authenticated = True
                    st.rerun()
                else:
                    st.error("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–ø–æ–ª–Ω—ã–π. –ü—Ä–æ–≤–µ—Ä—å backend.")
            else:
                st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

    with tab2:
        st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        name = st.text_input("–ò–º—è", key="register_name")
        surname = st.text_input("–§–∞–º–∏–ª–∏—è", key="register_surname")
        gender = st.radio("–ü–æ–ª", ["male", "female"], format_func=lambda x: "–ú—É–∂—Å–∫–æ–π" if x == "male" else "–ñ–µ–Ω—Å–∫–∏–π", key="register_gender")
        reg_email = st.text_input("Email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", key="register_email")
        reg_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="register_password")

        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", key="register_button"):
            headers = {"Content-Type": "application/json"}
            data = {
                "name": name,
                "surname": surname,
                "gender": gender,
                "email": reg_email,
                "password": reg_password
            }
            response = requests.post(f"{BACKEND_URL}/register", json=data, headers=headers)
            try:
                res = response.json()
                if response.status_code == 200:
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
                else:
                    st.error(res.get("message", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"))
            except Exception:
                st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
if st.session_state.authenticated and st.session_state.level == "beginner":
    st.subheader("üìñ –£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π ‚Äî –ë—É–∫–≤—ã –∞—Ä–∞–±—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞")

    letters = [
        "ÿß", "ÿ®", "ÿ™", "ÿ´", "ÿ¨", "ÿ≠", "ÿÆ", "ÿØ", "ÿ∞", "ÿ±", "ÿ≤", "ÿ≥", "ÿ¥", "ÿµ",
        "ÿ∂", "ÿ∑", "ÿ∏", "ÿπ", "ÿ∫", "ŸÅ", "ŸÇ", "ŸÉ", "ŸÑ", "ŸÖ", "ŸÜ", "Ÿá", "Ÿà", "Ÿä"
    ]

    for i, letter in enumerate(letters):
        with st.expander(f"üìò –ë—É–∫–≤–∞: {letter}"):
            etalon_path = Path(AUDIO_PATH) / st.session_state.gender / f"{i+1}.mp3"
            st.audio(str(etalon_path))

            ts = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
            letter_id = i + 1
            filename = f"user_{st.session_state.user_id}_letter_{letter_id}_{ts}.wav"
            wav_path = Path(USER_RECORDINGS) / filename
            wav_path.parent.mkdir(parents=True, exist_ok=True)

            audio = audiorecorder(key=f"rec-{i}")
            if audio:
                buffer = BytesIO()
                audio.export(buffer, format="wav")
                with open(wav_path, "wb") as f:
                    f.write(buffer.getvalue())

                st.audio(str(wav_path))
                st.success("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

                score, feedback = evaluate_pronunciation(str(wav_path), str(etalon_path))
                if score is not None:
                    st.markdown(f"### üéØ –¢–æ—á–Ω–æ—Å—Ç—å: **{score}%**")
                    st.info(f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback}")
                else:
                    st.error(feedback)
elif st.session_state.authenticated and st.session_state.user_id:
    st.sidebar.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
    if st.sidebar.button("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥"):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try:
            response = requests.get(f"{BACKEND_URL}/progress/{st.session_state.user_id}")
            if response.status_code == 200:
                data = response.json()
                st.subheader("üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å")
                st.markdown(f"**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {data['total']}")
                st.markdown(f"**–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:** {round(data['average'], 2)}%")

                st.markdown("### üìù –ò—Å—Ç–æ—Ä–∏—è")
                for r in data["history"]:
                    st.markdown(f"‚Ä¢ {r['item']} ‚Äî {r['score']}% ‚Äî *{r['timestamp']}*")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
